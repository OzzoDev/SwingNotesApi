import app from "../server.js";
import request from "supertest";
import { seedTestDb } from "./setup.js";
import { pool } from "../config/db.js";

let token;

beforeEach(async () => {
  await seedTestDb();

  const res = await request(app).post("/api/user/login").send({
    name: "alice",
    password: "1234",
  });

  token = res.body.token;
});

describe("Notes endpoints", () => {
  it("should get all notes", async () => {
    const res = await request(app).get("/api/notes").set("Authorization", `Bearer ${token}`);

    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body.data)).toBe(true);
  });

  it("should get all notes including search query", async () => {
    const res = await request(app)
      .get("/api/notes?search=secret")
      .set("Authorization", `Bearer ${token}`);

    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body.data)).toBe(true);
  });

  it("should throw unauthenticated error due to missing authorization header", async () => {
    const res = await request(app).get("/api/notes");

    expect(res.statusCode).toBe(401);
  });

  it("should throw unauthenticated error due to invalid token", async () => {
    const res = await request(app)
      .get("/api/notes")
      .set("Authorization", `Bearer someInvalidToken`);

    expect(res.statusCode).toBe(401);
  });

  it("should create a note", async () => {
    const res = await request(app)
      .post("/api/notes")
      .set("Authorization", `Bearer ${token}`)
      .send({ title: "New Note", text: "Note text" });

    expect(res.statusCode).toBe(201);
    expect(res.body.data.title).toBe("New Note");
  });

  it("should not create a note with missing title", async () => {
    const res = await request(app)
      .post("/api/notes")
      .set("Authorization", `Bearer ${token}`)
      .send({ text: "Note text" });

    expect(res.statusCode).toBe(400);
  });

  it("should not create a note with missing text", async () => {
    const res = await request(app)
      .post("/api/notes")
      .set("Authorization", `Bearer ${token}`)
      .send({ title: "New note" });

    expect(res.statusCode).toBe(400);
  });

  it("should not create a note with too long title", async () => {
    const res = await request(app).post("/api/notes").set("Authorization", `Bearer ${token}`).send({
      title:
        "Very long title.........................................................................................................................................................................................................................................................................",
      text: "Note text",
    });

    expect(res.statusCode).toBe(400);
  });

  it("should not create a note with too long text", async () => {
    const res = await request(app).post("/api/notes").set("Authorization", `Bearer ${token}`).send({
      title: "New Note",
      text: `Very long text`,
    });

    expect(res.statusCode).toBe(400);
  });

  it("should not create note with unrecognized req body field", async () => {
    const res = await request(app).post("/api/notes").set("Authorization", `Bearer ${token}`).send({
      title: "New Note",
      text: "Note text",
      secret: "xxx",
    });

    expect(res.statusCode).toBe(400);
  });
});

afterAll(async () => {
  await pool.end();
});
